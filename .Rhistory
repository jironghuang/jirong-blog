library("miniCRAN")
# Specify list of packages to download
pkgs <- c('stringr', 'devtools', 'ggplot2', 'dplyr', 'tidyr', 'rmarkdown', 'knitr', 'reshape2', 'gdata',
'caret', 'biganalytics', 'RTextTools', 'tm', 'caTools', 'shiny', 'lattice', 'ggfortify',
'ggdendro', 'NLP', 'knitr', 'igraph', 'RColorBrewer', 'readxl', 'rJava', 'SparseM', 'foreign',
'Amelia', 'forcats', 'dummies', 'sf', 'mapview', 'rworldmap', 'raster', 'rgeos', 'maptools',
'rgdal', 'shapefiles', 'data.table', 'MASS', 'e1071', 'foreach', 'parallel', 'forecast', 'quantmod',
'RSNNS', 'xgboost', 'magrittr', 'vtreat', 'ROCR', 'pROC', 'ggmap', 'RgoogleMaps', 'devtools', 'GISTools',
'gower', 'rstudioapi', 'satellite', 'rJava', 'XLConnect', 'Rtsne', 'cluster', 'pvclust', 'Rclusterpp',
'kernlab', 'logisticPCA', 'LiblineaR', 'mboost', 'earth', 'gam', 'kknn', 'callr', 'getopt', 'matrixStats',
'rstanarm', 'skimr', 'doMC', 'snow', 'mlr', 'skimr', 'imputeTS', 'moments', 'binr', 'ggpmisc', 'shinythemes',
'shinydashboard', 'shinydashboardPlus', 'httpuv', 'radiant', 'visNetwork', 'sampling', 'PracTools', 'survey',
'mice', 'mi', 'VIM')
pkgs <- c('sampling', 'PracTools', 'survey', 'mice', 'mi', 'VIM')
# Make list of package URLs
#revolution <- c(CRAN="http://cran.revolutionanalytics.com")
rstudio <- c(CRAN="https://cran.rstudio.com")
pkgList <- pkgDep(pkgs, repos=rstudio, type=c("win.binary" ))
pkgList <- unique(pkgList)
# Set location to store source files
#local_CRAN <- paste0("/Volumes/[E] Windows 10", "/local_CRAN")
local_CRAN <- paste0("/Volumes/Secure Key ", "/local_CRAN")
#local_CRAN <- paste0("file:///D:\\", "local_CRAN")
# Make repo for source
#makeRepo(pkgList, path = local_CRAN, repos = revolution, type = c("source","win.binary"))
#makeRepo(pkgList, path = local_CRAN, repos = rstudio, type = c("source","win.binary"))
# Add new packages (from CRAN) to the miniCRAN repo
#addPackage("Matrix", path=local_CRAN, repos=revolution, type=c("source", "win.binary"))
addPackage(pkgList, path=local_CRAN, repos=rstudio, type=c("win.binary"))
pkgAvail(repos=local_CRAN, type="win.binary")[, c(1:3, 5)]
# Check if updated packages are available
# oldPackages(path=local_CRAN, repos=rstudio, type="source")[, 1:3] # should need update
oldPackages(path=local_CRAN, repos=rstudio, type="win.binary")[, 1:3] # should be current
# Update available packages
# updatePackages(path=local_CRAN, repos=rstudio, type="source", ask=FALSE) # should need update
updatePackages(path=local_CRAN, repos=rstudio, type="win.binary", ask=FALSE) # should be current
# install...
install.packages('rstudioapi',
repos = local_CRAN, # do I really need "file:///" ? yes I do!
dependencies = TRUE,
contrib.url = local_CRAN,
type  = "win.binary" )
local_CRAN <- paste0("/Volumes/Secure Key ", "/local_CRAN")
# Specify list of packages to download
pkgs <- c('stringr', 'devtools', 'ggplot2', 'dplyr', 'tidyr', 'rmarkdown', 'knitr', 'reshape2', 'gdata',
'caret', 'biganalytics', 'RTextTools', 'tm', 'caTools', 'shiny', 'lattice', 'ggfortify',
'ggdendro', 'NLP', 'knitr', 'igraph', 'RColorBrewer', 'readxl', 'rJava', 'SparseM', 'foreign',
'Amelia', 'forcats', 'dummies', 'sf', 'mapview', 'rworldmap', 'raster', 'rgeos', 'maptools',
'rgdal', 'shapefiles', 'data.table', 'MASS', 'e1071', 'foreach', 'parallel', 'forecast', 'quantmod',
'RSNNS', 'xgboost', 'magrittr', 'vtreat', 'ROCR', 'pROC', 'ggmap', 'RgoogleMaps', 'devtools', 'GISTools',
'gower', 'rstudioapi', 'satellite', 'rJava', 'XLConnect', 'Rtsne', 'cluster', 'pvclust', 'Rclusterpp',
'kernlab', 'logisticPCA', 'LiblineaR', 'mboost', 'earth', 'gam', 'kknn', 'callr', 'getopt', 'matrixStats',
'rstanarm', 'skimr', 'doMC', 'snow', 'mlr', 'skimr', 'imputeTS', 'moments', 'binr', 'ggpmisc', 'shinythemes',
'shinydashboard', 'shinydashboardPlus', 'httpuv', 'radiant', 'visNetwork', 'sampling', 'PracTools', 'survey',
'mice', 'mi', 'VIM')
pkgs <- c('sampling', 'PracTools', 'survey', 'mice', 'mi', 'VIM')
# Make list of package URLs
#revolution <- c(CRAN="http://cran.revolutionanalytics.com")
rstudio <- c(CRAN="https://cran.rstudio.com")
pkgList <- pkgDep(pkgs, repos=rstudio, type=c("win.binary" ))
pkgList <- unique(pkgList)
# Set location to store source files
#local_CRAN <- paste0("/Volumes/[E] Windows 10", "/local_CRAN")
local_CRAN <- paste0("/Volumes/Secure Key ", "/local_CRAN")
#local_CRAN <- paste0("file:///D:\\", "local_CRAN")
# Add new packages (from CRAN) to the miniCRAN repo
#addPackage("Matrix", path=local_CRAN, repos=revolution, type=c("source", "win.binary"))
addPackage(pkgList, path=local_CRAN, repos=rstudio, type=c("win.binary"))
pkgAvail(repos=local_CRAN, type="win.binary")[, c(1:3, 5)]
# Check if updated packages are available
# oldPackages(path=local_CRAN, repos=rstudio, type="source")[, 1:3] # should need update
oldPackages(path=local_CRAN, repos=rstudio, type="win.binary")[, 1:3] # should be current
# Update available packages
# updatePackages(path=local_CRAN, repos=rstudio, type="source", ask=FALSE) # should need update
updatePackages(path=local_CRAN, repos=rstudio, type="win.binary", ask=FALSE) # should be current
# install...
install.packages('rstudioapi',
repos = local_CRAN, # do I really need "file:///" ? yes I do!
dependencies = TRUE,
contrib.url = local_CRAN,
type  = "win.binary" )
installed.packages()
library(ggplot2)
local_CRAN <- paste0("file:///D:\\", "local_CRAN")
# Add new packages (from CRAN) to the miniCRAN repo
#addPackage("Matrix", path=local_CRAN, repos=revolution, type=c("source", "win.binary"))
addPackage(pkgList, path=local_CRAN, repos=rstudio, type=c("win.binary"))
pkgAvail(repos=local_CRAN, type="win.binary")[, c(1:3, 5)]
# Check if updated packages are available
# oldPackages(path=local_CRAN, repos=rstudio, type="source")[, 1:3] # should need update
oldPackages(path=local_CRAN, repos=rstudio, type="win.binary")[, 1:3] # should be current
# Update available packages
# updatePackages(path=local_CRAN, repos=rstudio, type="source", ask=FALSE) # should need update
updatePackages(path=local_CRAN, repos=rstudio, type="win.binary", ask=FALSE) # should be current
# install...
install.packages('rstudioapi',
repos = local_CRAN, # do I really need "file:///" ? yes I do!
dependencies = TRUE,
contrib.url = local_CRAN,
type  = "win.binary" )
library(ggplot2)
pkgs <- c('stringr', 'devtools', 'ggplot2', 'dplyr', 'tidyr', 'rmarkdown', 'knitr', 'reshape2', 'gdata',
'caret', 'biganalytics', 'RTextTools', 'tm', 'caTools', 'shiny', 'lattice', 'ggfortify',
'ggdendro', 'NLP', 'knitr', 'igraph', 'RColorBrewer', 'readxl', 'rJava', 'SparseM', 'foreign',
'Amelia', 'forcats', 'dummies', 'sf', 'mapview', 'rworldmap', 'raster', 'rgeos', 'maptools',
'rgdal', 'shapefiles', 'data.table', 'MASS', 'e1071', 'foreach', 'parallel', 'forecast', 'quantmod',
'RSNNS', 'xgboost', 'magrittr', 'vtreat', 'ROCR', 'pROC', 'ggmap', 'RgoogleMaps', 'devtools', 'GISTools',
'gower', 'rstudioapi', 'satellite', 'rJava', 'XLConnect', 'Rtsne', 'cluster', 'pvclust', 'Rclusterpp',
'kernlab', 'logisticPCA', 'LiblineaR', 'mboost', 'earth', 'gam', 'kknn', 'callr', 'getopt', 'matrixStats',
'rstanarm', 'skimr', 'doMC', 'snow', 'mlr', 'skimr', 'imputeTS', 'moments', 'binr', 'ggpmisc', 'shinythemes',
'shinydashboard', 'shinydashboardPlus', 'httpuv', 'radiant', 'visNetwork', 'sampling', 'PracTools', 'survey',
'mice', 'mi', 'VIM')
pkgs.for.installation <- c('mboost', 'earth', 'gam', 'kknn', 'binr', 'xgboost', 'caret', 'igraph', 'moments', 'sampling', 'PracTools', 'survey', 'mice', 'mi', 'VIM', pkgs)
install.packages(pkgs.for.installation,
repos = local_CRAN,
dependencies = TRUE,
contrib.url = local_CRAN,
type = "win.binary")
library(ggplot2)
install.packages('rstudioapi',
repos = local_CRAN, # do I really need "file:///" ? yes I do!
dependencies = TRUE,
contrib.url = local_CRAN,
type  = "win.binary" )
#########################Installation of packages from non WOG computer####################
library("miniCRAN")
install.packages("miniCRAN")
pkgs = "config"
# Make list of package URLs
#revolution <- c(CRAN="http://cran.revolutionanalytics.com")   #If installing from revolution cran
rstudio <- c(CRAN="https://cran.rstudio.com")
pkgList <- pkgDep(pkgs, repos=rstudio, type=c("win.binary" ))
pkgList <- unique(pkgList)
#########################Installation of packages from non WOG computer####################
library("miniCRAN")
pkgs = "config"
# Make list of package URLs
#revolution <- c(CRAN="http://cran.revolutionanalytics.com")   #If installing from revolution cran
rstudio <- c(CRAN="https://cran.rstudio.com")
pkgList <- pkgDep(pkgs, repos=rstudio, type=c("win.binary" ))
pkgList <- unique(pkgList)
local_CRAN = paste0("/media/jirong/Secure Key 3/","local_CRAN")
local_CRAN
# Add new packages (from CRAN) to the miniCRAN repo
addPackage(pkgList, path=local_CRAN, repos=rstudio, type=c("win.binary"))
pkgAvail(repos=local_CRAN, type="win.binary")[, c(1:3, 5)]
# Check if updated packages are available
oldPackages(path=local_CRAN, repos=rstudio, type="win.binary")[, 1:3] # should be current
# Update available packages
updatePackages(path=local_CRAN, repos=rstudio, type="win.binary", ask=FALSE) # should be current
shiny::runApp('R/x86_64-pc-linux-gnu-library/3.4/radiant/app')
runApp('R/x86_64-pc-linux-gnu-library/3.4/radiant.design/app')
runApp('R/x86_64-pc-linux-gnu-library/3.4/radiant.design/app')
runApp('R/x86_64-pc-linux-gnu-library/3.4/radiant.basics/app')
file.path(getOption("radiant.path.data")
file.path(getOption("radiant.path.data"), "app/init.R"),
file.path(getOption("radiant.path.data"), "app/init.R")
file.path(getOption("radiant.path.data"), "app/radiant.R"), encoding = getOption("radiant.encoding"), local = TRUE)
file.path(getOption("radiant.path.data"), "app/radiant.R"),
file.path(getOption("radiant.path.data")
file.path(getOption("radiant.path.data"), "app/radiant.R"
file.path(getOption("radiant.path.data"), "app/radiant.R")
runApp('R/x86_64-pc-linux-gnu-library/3.4/radiant.basics/app')
## ui for basics menu in radiant
navbar_proj(
do.call(
navbarPage,
c(
"Radiant",
getOption("radiant.nav_ui"),
getOption("radiant.basics_ui"),
getOption("radiant.shared_ui"),
help_menu("help_basics_ui")
)
)
)
runApp('R/x86_64-pc-linux-gnu-library/3.4/radiant.data/app')
runApp('R/x86_64-pc-linux-gnu-library/3.4/radiant.basics/app')
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
# Custom CSS to hide the default logout panel
tags$head(tags$style(HTML('.shiny-server-account { display: none; }'))),
# The dynamically-generated user panel
uiOutput("userpanel")
),
dashboardBody()
)
server <- function(input, output, session) {
output$userpanel <- renderUI({
# session$user is non-NULL only in authenticated sessions
if (!is.null(session$user)) {
sidebarUserPanel(
span("Logged in as ", session$user),
subtitle = a(icon("sign-out"), "Logout", href="__logout__"))
}
})
}
shinyApp(ui, server)
shinyApp(
ui = dashboardPage(
dashboardHeader(
title = "Title and sidebar 350 pixels wide",
titleWidth = 350
),
dashboardSidebar(
width = 350,
sidebarMenu(
menuItem("Menu Item")
)
),
dashboardBody()
),
server = function(input, output) { }
)
shinyApp(
ui = dashboardPage(
dashboardHeader(
title = "Title and sidebar 350 pixels wide",
titleWidth = 350
),
dashboardSidebar(
width = 100,
sidebarMenu(
menuItem("Menu Item")
)
),
dashboardBody()
),
server = function(input, output) { }
)
body <- dashboardBody(
fluidRow(
tabBox(
title = "First tabBox",
# The id lets us use input$tabset1 on the server to find the current tab
id = "tabset1", height = "250px",
tabPanel("Tab1", "First tab content"),
tabPanel("Tab2", "Tab content 2")
),
tabBox(
side = "right", height = "250px",
selected = "Tab3",
tabPanel("Tab1", "Tab content 1"),
tabPanel("Tab2", "Tab content 2"),
tabPanel("Tab3", "Note that when side=right, the tab order is reversed.")
)
),
fluidRow(
tabBox(
# Title can include an icon
title = tagList(shiny::icon("gear"), "tabBox status"),
tabPanel("Tab1",
"Currently selected tab from first box:",
verbatimTextOutput("tabset1Selected")
),
tabPanel("Tab2", "Tab content 2")
)
)
)
shinyApp(
ui = dashboardPage(
dashboardHeader(title = "tabBoxes"),
dashboardSidebar(),
body
),
server = function(input, output) {
# The currently selected tab from the first box
output$tabset1Selected <- renderText({
input$tabset1
})
}
)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Dynamic sidebar"),
dashboardSidebar(
sidebarMenuOutput("menu")
),
dashboardBody(tabItems(
tabItem(tabName = "dashboard", h2("Dashboard tab content"))
))
)
server <- function(input, output) {
output$menu <- renderMenu({
sidebarMenu(id="mytabs",
menuItem("Menu item", tabName="dashboard", icon = icon("calendar"))
)
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Dynamic sidebar"),
dashboardSidebar(
sidebarMenu(id="tabs",
sidebarMenuOutput("menu")
)
),
dashboardBody(
tabItems(
tabItem(tabName = "m1", p("Menu content 1") ),
tabItem(tabName = "m2", p("Menu content 2") )
)
)
)
server <- function(input, output,session) {
output$menu <- renderMenu({
sidebarMenu(
menuItem("Menu item1", tabName="m1", icon = icon("calendar")),
menuItem("Menu item2", tabName="m2", icon = icon("database"))
)
})
isolate({updateTabItems(session, "tabs", "m2")})
}
shinyApp(ui, server)
## Only run this example in interactive R sessions
if (interactive()) {
ui <- dashboardPage(
dashboardHeader(title = "Simple tabs"),
dashboardSidebar(
sidebarMenu(
id = "tabs",
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
),
actionButton('switchtab', 'Switch tab')
),
dashboardBody(
tabItems(
tabItem(tabName = "dashboard",
h2("Dashboard tab content")
),
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
)
server <- function(input, output, session) {
observeEvent(input$switchtab, {
newtab <- switch(input$tabs,
"dashboard" = "widgets",
"widgets" = "dashboard"
)
updateTabItems(session, "tabs", newtab)
})
}
shinyApp(ui, server)
}
runApp('Dropbox/stb_pocs/sidebar_change')
runApp('Dropbox/stb_pocs/sidebar_change2/script.R')
runApp('Dropbox/stb_pocs/sidebar_change2/script2.R')
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(sidebarLayout(
sidebarPanel(
sliderInput("controller", "Controller", 1, 3, 1)
),
mainPanel(
tabsetPanel(id = "inTabset",
tabPanel(title = "Panel 1", value = "panel1", "Panel 1 content"),
tabPanel(title = "Panel 2", value = "panel2", "Panel 2 content"),
tabPanel(title = "Panel 3", value = "panel3", "Panel 3 content")
)
)
))
server <- function(input, output, session) {
observeEvent(input$controller, {
updateTabsetPanel(session, "inTabset",
selected = paste0("panel", input$controller)
)
})
}
shinyApp(ui, server)
}
library(blogdown)
setwd("/home/jirong/Desktop/github/jirong-blog")
blogdown::serve_site()
library(blogdown)
setwd("/home/jirong/Desktop/github/jirong-blog")
blogdown::new_post("Rolling out the Investment Compass interactive app that I promised to myself eons ago")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
library(blogdown)
setwd("/home/jirong/Desktop/github/jirong-blog")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
library(blogdown)
setwd("/home/jirong/Desktop/github/jirong-blog")
blogdown::serve_site()
library(blogdown)
setwd("/home/jirong/Desktop/github/jirong-blog")
library(blogdown)
setwd("/home/jirong/Desktop/github/jirong-blog")
# blogdown::new_site(theme = "gcushen/hugo-academic")
blogdown::serve_site()
q()
q()
q()
library(RemoveExchangeRateEffects)
help(RemoveExchangeRateEffects)
??RemoveExchangeRateEffects
??exchange_rate_decomposition
library(RemoveExchangeRateEffects)
help(multiple_exchange_rate_decomposition)
library(blogdown)
setwd("/home/jirong/Desktop/github/jirong-blog")
hugo new post/"Architecture and process flow for algorithmic trading.md"
q()
blogdown::serve_site()
blogdown::update_hugo()
blogdown::serve_site()
q()
library(blogdown)
blogdown::serve_site()
library(blogdown)
blogdown::serve_site()
blogdown::serve_site()
q()
q(0)
q()
library(blogdown)
blogdown::serve_site()
blogdown::serve_site()
blogdown::new_post("Sampling With Replacement Through First Principles")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
library(kableExtra)
blogdown::serve_site()
suppressPackageStartupMessages(library(tvm))
blogdown::serve_site()
blogdown::serve_site()
