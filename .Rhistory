start = 1900, end = 2018, extra = FALSE, cache = NULL)
names(mkt_cap)[which(names(mkt_cap) == "CM.MKT.LCAP.CD")] = "value"
#Cast the dataframes
mkt_cap_wide = dcast(mkt_cap,country ~ year,na.rm = T)
#GDP data-->NY.GDP.MKTP.CD
gdp = WDI(country = "all", indicator = "NY.GDP.MKTP.CD",
start = 1900, end = 2018, extra = FALSE, cache = NULL)
View(mkt_cap)
#Macro analysis on Mkt cap to GDP
#Do trailing 5 year averages
#Maybe better t
#Rebase to 2016 using GFP growth figures for key countries
library("WDI")
library("reshape2")
library("rvest")
library("ggplot2")
rm(list = ls())
# hk_ind = (3193235.54 * 1000000)/(320.9 * 1000000000)
setwd("/home/jirong/Dropbox/macro analysis")
##################################Trying out world bank API########################
#Market cap data
mkt_cap = WDI(country = "all", indicator = "CM.MKT.LCAP.CD",
start = 1900, end = 2018, extra = FALSE, cache = NULL)
names(mkt_cap)[which(names(mkt_cap) == "CM.MKT.LCAP.CD")] = "value"
#Cast the dataframes
mkt_cap_wide = dcast(mkt_cap,country ~ year,na.rm = T)
#GDP data-->NY.GDP.MKTP.CD
gdp = WDI(country = "all", indicator = "NY.GDP.MKTP.CD",
start = 1900, end = 2018, extra = FALSE, cache = NULL)
names(gdp)[which(names(gdp) == "NY.GDP.MKTP.CD")] = "value"
#Cast the dataframes
gdp_wide = dcast(gdp,country ~ year,na.rm = T)
#For a start-->Scrape the data from wikipedia-->Port it to a google sheet-->To 'project' the 2017 GDP growth rates
#https://en.wikipedia.org/wiki/List_of_countries_by_real_GDP_growth_rate
url <- "https://en.wikipedia.org/wiki/List_of_countries_by_real_GDP_growth_rate#cite_note-1"
webpage = read_html(url)
tbls <- html_nodes(webpage, "table")
tbls_ls <- webpage %>%
html_nodes("table") %>%
.[1:4] %>%
html_table(fill = TRUE)
gdp_growth = tbls_ls[[1]]  #GDP real growth rates
names(gdp_growth) = c("rank","country","gdp_rate")
#Remove all []
for(i in 2:ncol(gdp_growth)){
gdp_growth[,i] = gsub("\\[.*\\]","",gdp_growth[,i])
}
gdp_growth$gdp_rate = as.numeric(gdp_growth$gdp_rate)
#Merge in to the data frame
gdp_wide = merge(gdp_wide,gdp_growth, by = "country", all.x = T)
gdp_wide = gdp_wide[!duplicated(gdp_wide$country),]
gdp_wide$`2017` = gdp_wide$`2016` * (1+ gdp_wide$gdp_rate/100)
#removing unnecssary names
gdp_wide = gdp_wide[,-which(names(gdp_wide) == "rank")]
gdp_wide = gdp_wide[,-which(names(gdp_wide) == "gdp_rate")]
#Assume 2018 GDP to be same as 2017
gdp_wide$`2018` = gdp_wide$`2017`
View(gdp_wide)
#For each country, assign a ticker symbol from NYSE
#Store the end 2016 price and the most updated price now. Then pluck the growth rate on the market cap
source("match_WB_US_ticker.R")
head(mkt_cap_wide)
head(mkt_cap_wide,100)
mkt_cap_wide = merge(mkt_cap_wide,wb_ticker, by = "country", all.x = T)
mkt_cap_wide
mkt_cap_wide$`2017` = mkt_cap_wide$`2016` * (1+mkt_cap_wide$returns_17)
mkt_cap_wide$`2017`
View(mkt_cap_wide)
mkt_cap_wide$`2016`
(1+mkt_cap_wide$returns_17)
mkt_cap_wide$returns_17
View(wb_ticker)
#setting directory
# setwd("/home/jirong/Dropbox/macro analysis")
source("crawl_google_ind.R")
#Matching contries in World Bankl list to Google Ticker Symbol
wb_ticker = as.data.frame(mkt_cap_wide$country)
names(wb_ticker)[1] = "country"
wb_ticker$ticker = NA
wb_ticker$ticker[which(wb_ticker$country == "Arab World")] = "MES"
wb_ticker$ticker[which(wb_ticker$country == "Argentina")] = "ARGT"
wb_ticker$ticker[which(wb_ticker$country == "Australia")] = "EWA"
wb_ticker$ticker[which(wb_ticker$country == "Austria")] = "EWO"
wb_ticker$ticker[which(wb_ticker$country == "Belgium")] = "EWK"
wb_ticker$ticker[which(wb_ticker$country == "Brazil")] = "EWZ"
wb_ticker$ticker[which(wb_ticker$country == "Canada")] = "EWC"
wb_ticker$ticker[which(wb_ticker$country == "Chile")] = "ECH"
wb_ticker$ticker[which(wb_ticker$country == "China")] = "MCHI"
wb_ticker$ticker[which(wb_ticker$country == "Colombia")] = "ICOL"
# wb_ticker$ticker[which(wb_ticker$country == "Denmark")] = "EDEN"    #Something wrong with this
wb_ticker$ticker[which(wb_ticker$country == "Euro area")] = "IEV"
wb_ticker$ticker[which(wb_ticker$country == "European Union")] = "EZU"
wb_ticker$ticker[which(wb_ticker$country == "France")] = "EWQ"
wb_ticker$ticker[which(wb_ticker$country == "Germany")] = "EWG"
wb_ticker$ticker[which(wb_ticker$country == "Greece")] = "GREK"
wb_ticker$ticker[which(wb_ticker$country == "Hong Kong SAR, China")] = "EWH"
wb_ticker$ticker[which(wb_ticker$country == "India")] = "INDA"
wb_ticker$ticker[which(wb_ticker$country == "Indonesia")] = "EIDO"
wb_ticker$ticker[which(wb_ticker$country == "Ireland")] = "EIRL"
wb_ticker$ticker[which(wb_ticker$country == "Israel")] = "EIS"
wb_ticker$ticker[which(wb_ticker$country == "Italy")] = "EWI"
wb_ticker$ticker[which(wb_ticker$country == "Japan")] = "EWJ"
wb_ticker$ticker[which(wb_ticker$country == "Ireland")] = "EIRL"
wb_ticker$ticker[which(wb_ticker$country == "Korea, Rep.")] = "EWY"
wb_ticker$ticker[which(wb_ticker$country == "Malaysia")] = "EWM"
wb_ticker$ticker[which(wb_ticker$country == "Ireland")] = "EIRL"
wb_ticker$ticker[which(wb_ticker$country == "Meixco")] = "EWW"
wb_ticker$ticker[which(wb_ticker$country == "Netherlands")] = "EWN"
wb_ticker$ticker[which(wb_ticker$country == "New Zealand")] = "ENZL"
wb_ticker$ticker[which(wb_ticker$country == "Nigeria")] = "NGE"
wb_ticker$ticker[which(wb_ticker$country == "Netherlands")] = "EWN"
wb_ticker$ticker[which(wb_ticker$country == "Netherlands")] = "EWN"
wb_ticker$ticker[which(wb_ticker$country == "Norway")] = "ENOR"
wb_ticker$ticker[which(wb_ticker$country == "Peru")] = "EPU"
wb_ticker$ticker[which(wb_ticker$country == "Philippines")] = "EPHE"
wb_ticker$ticker[which(wb_ticker$country == "Poland")] = "EPOL"
wb_ticker$ticker[which(wb_ticker$country == "Portugal")] = "PGAL"
wb_ticker$ticker[which(wb_ticker$country == "Qatar")] = "QAT"
wb_ticker$ticker[which(wb_ticker$country == "Portugal")] = "PGAL"
wb_ticker$ticker[which(wb_ticker$country == "Russian Federation")] = "ERUS"
wb_ticker$ticker[which(wb_ticker$country == "Saudi Arabia")] = "KSA"
wb_ticker$ticker[which(wb_ticker$country == "Singapore")] = "EWS"
wb_ticker$ticker[which(wb_ticker$country == "South Africa")] = "EZA"
wb_ticker$ticker[which(wb_ticker$country == "Spain")] = "EWP"
wb_ticker$ticker[which(wb_ticker$country == "Sweden")] = "EWD"
wb_ticker$ticker[which(wb_ticker$country == "Switzerland")] = "EWL"
wb_ticker$ticker[which(wb_ticker$country == "Thailand")] = "THD"
wb_ticker$ticker[which(wb_ticker$country == "Turkey")] = "TUR"
wb_ticker$ticker[which(wb_ticker$country == "United Kingdom")] = "EWU"
wb_ticker$ticker[which(wb_ticker$country == "United States")] = "VTI"
wb_ticker$ticker[which(wb_ticker$country == "Vietnam")] = "VNM"
wb_ticker$ticker[which(wb_ticker$country == "World")] = "VT"
wb_ticker = subset(wb_ticker,!is.na(wb_ticker$ticker))
wb_ticker$start_price = as.numeric(lapply(wb_ticker$ticker,scrape_google_fin_start))
wb_ticker$start_price
scrape_google_fin_start("VT")
ticker = "VT"
start = Sys.Date()-4
end = Sys.Date()
getSymbols(ticker,from = start, to = end)
stock_price = as.data.frame(get(ticker))
stock_price$ticker_symbol = ticker
stock_price$Date = row.names(stock_price)
stock_price
names(stock_price) = c("Open","High","Low", "Close", "Volume", "ticker_symbol", "Date")
price = stock_price$Close[nrow(stock_price)]
price
scrape_google_fin_latest("VT")
scrape_google_fin_start("VT")
start = "2017-01-01"
end = "2017-01-04"
ticker = getSymbols(ticker,from = start, to = end, auto.assign=F)
ticker
# getSymbols(ticker,from = start, to = end)
stock_price = as.data.frame(get(ticker))
View(ticker)
ticker)
ticker
as.data.frame(get(ticker))
ticker = getSymbols(ticker,from = start, to = end, auto.assign=F)
start = "2017-01-01"
end = "2017-01-04"
ticker = getSymbols(ticker,from = start, to = end, auto.assign=F)
ticker = "VT"
ticker = getSymbols(ticker,from = start, to = end, auto.assign=F)
ticker = getSymbols(ticker,from = start, to = end)
start = "2017-01-01"
end = "2017-01-04"
ticker = "VT"
ticker = getSymbols(ticker,from = start, to = end)
# getSymbols(ticker,from = start, to = end)
stock_price = ticker
stock_price$ticker_symbol = ticker
stock_price$Date = row.names(stock_price)
names(stock_price) = c("Open","High","Low", "Close", "Volume", "ticker_symbol", "Date")
start = "2017-01-01"
end = "2017-01-04"
ticker = "VT"
ticker = getSymbols(ticker,from = start, to = end)
# getSymbols(ticker,from = start, to = end)
stock_price = ticker
stock_price
ticker = "VT"
start = "2017-01-01"
end = "2017-01-04"
ticker = getSymbols(ticker,from = start, to = end)
ticker
# getSymbols(ticker,from = start, to = end)
stock_price = as.data.frame(get(ticker))
stock_price
ticker
ticker = "VT"
ticker = getSymbols(ticker,from = start, to = end)
ticker
# getSymbols(ticker,from = start, to = end)
stock_price = as.data.frame(get(ticker))
stock_price
stock_price$ticker_symbol = ticker
stock_price
stock_price$Date = row.names(stock_price)
names(stock_price) = c("Open","High","Low", "Close", "Volume", "ticker_symbol", "Date")
price = stock_price$Close[nrow(stock_price)]
#Macro analysis on Mkt cap to GDP
#Do trailing 5 year averages
#Maybe better t
#Rebase to 2016 using GFP growth figures for key countries
library("WDI")
library("reshape2")
library("rvest")
library("ggplot2")
rm(list = ls())
# hk_ind = (3193235.54 * 1000000)/(320.9 * 1000000000)
setwd("/home/jirong/Dropbox/macro analysis")
##################################Trying out world bank API########################
#Market cap data
mkt_cap = WDI(country = "all", indicator = "CM.MKT.LCAP.CD",
start = 1900, end = 2018, extra = FALSE, cache = NULL)
names(mkt_cap)[which(names(mkt_cap) == "CM.MKT.LCAP.CD")] = "value"
#Cast the dataframes
mkt_cap_wide = dcast(mkt_cap,country ~ year,na.rm = T)
#GDP data-->NY.GDP.MKTP.CD
gdp = WDI(country = "all", indicator = "NY.GDP.MKTP.CD",
start = 1900, end = 2018, extra = FALSE, cache = NULL)
names(gdp)[which(names(gdp) == "NY.GDP.MKTP.CD")] = "value"
#Cast the dataframes
gdp_wide = dcast(gdp,country ~ year,na.rm = T)
#For a start-->Scrape the data from wikipedia-->Port it to a google sheet-->To 'project' the 2017 GDP growth rates
#https://en.wikipedia.org/wiki/List_of_countries_by_real_GDP_growth_rate
url <- "https://en.wikipedia.org/wiki/List_of_countries_by_real_GDP_growth_rate#cite_note-1"
webpage = read_html(url)
tbls <- html_nodes(webpage, "table")
tbls_ls <- webpage %>%
html_nodes("table") %>%
.[1:4] %>%
html_table(fill = TRUE)
gdp_growth = tbls_ls[[1]]  #GDP real growth rates
names(gdp_growth) = c("rank","country","gdp_rate")
#Remove all []
for(i in 2:ncol(gdp_growth)){
gdp_growth[,i] = gsub("\\[.*\\]","",gdp_growth[,i])
}
gdp_growth$gdp_rate = as.numeric(gdp_growth$gdp_rate)
#Merge in to the data frame
gdp_wide = merge(gdp_wide,gdp_growth, by = "country", all.x = T)
gdp_wide = gdp_wide[!duplicated(gdp_wide$country),]
gdp_wide$`2017` = gdp_wide$`2016` * (1+ gdp_wide$gdp_rate/100)
#removing unnecssary names
gdp_wide = gdp_wide[,-which(names(gdp_wide) == "rank")]
gdp_wide = gdp_wide[,-which(names(gdp_wide) == "gdp_rate")]
#Assume 2018 GDP to be same as 2017
gdp_wide$`2018` = gdp_wide$`2017`
#For each country, assign a ticker symbol from NYSE
#Store the end 2016 price and the most updated price now. Then pluck the growth rate on the market cap
source("match_WB_US_ticker.R")
View(wb_ticker)
mkt_cap_wide = merge(mkt_cap_wide,wb_ticker, by = "country", all.x = T)
mkt_cap_wide$`2017` = mkt_cap_wide$`2016` * (1+mkt_cap_wide$returns_17)
mkt_cap_wide$`2018` = mkt_cap_wide$`2016` * (1+mkt_cap_wide$returns)
mkt_cap_wide = mkt_cap_wide[,-which(names(mkt_cap_wide) == "returns")]
mkt_cap_wide = mkt_cap_wide[,-which(names(mkt_cap_wide) == "returns_17")]
#Plot the market cap to growth rates
#Check if names are the same
nrow(gdp_wide) == sum(mkt_cap_wide$country == gdp_wide$country)
mkt_cap_gdp = mkt_cap_wide
mkt_cap_gdp[,2:ncol(mkt_cap_gdp)] = mkt_cap_wide[,2:ncol(mkt_cap_wide)] / gdp_wide[,2:ncol(gdp_wide)]
mkt_cap_gdp = subset(mkt_cap_gdp,!is.na(mkt_cap_gdp$`2018`))
write.csv(mkt_cap_gdp,"mkt_cap_gdp.csv",row.names = F)
#Melt the data frame
mkt_cap_gdp_long = melt(mkt_cap_gdp, id = "country")
mkt_cap_gdp_long$variable = as.numeric(as.vector(mkt_cap_gdp_long$variable))
# mkt_cap_gdp_long = subset(mkt_cap_gdp_long,!is.na(mkt_cap_gdp_long$value))
# mkt_cap_gdp_long = subset(mkt_cap_gdp_long,mkt_cap_gdp_long$country == "United States")
#Use this to filter for countries in a shiny dashboard
#Can also create time lags
ggplot(data = mkt_cap_gdp_long,
aes(x = variable, y = value, colour = country)) +
geom_line()
View(mkt_cap_gdp)
#Use apply function to find the average, 5 year average, 10 year average, 20 year average
apply(mkt_cap_gdp,2,mean,na.rm = T)
#Use apply function to find the average, 5 year average, 10 year average, 20 year average
apply(mkt_cap_gdp,1,mean,na.rm = T)
#Use apply function to find the average, 5 year average, 10 year average, 20 year average
apply(mkt_cap_gdp[,-1],1,mean,na.rm = T)
names(mkt_cap_gdp)
apply(mkt_cap_gdp[,-c(1,which(names(mkt_cap_gdp) == "1960"):
which(names(mkt_cap_gdp) == "2012"))],1,mean,na.rm = T)
#Find 10-year average
apply(mkt_cap_gdp[,-c(1,which(names(mkt_cap_gdp) == "1960"):
which(names(mkt_cap_gdp) == "2007"))],1,mean,na.rm = T)
#Form a new data frame
avg_ratios = data.frame(avg = avg, avg_5 = avg_5, avg_10 = avg_10)
avg = apply(mkt_cap_gdp[,-1],1,mean,na.rm = T)
#Find 5-year average
avg_5 = apply(mkt_cap_gdp[,-c(1,which(names(mkt_cap_gdp) == "1960"):
which(names(mkt_cap_gdp) == "2012"))],1,mean,na.rm = T)
#Find 10-year average
avg_10 = apply(mkt_cap_gdp[,-c(1,which(names(mkt_cap_gdp) == "1960"):
which(names(mkt_cap_gdp) == "2007"))],1,mean,na.rm = T)
avg_ratios = data.frame(avg = avg, avg_5 = avg_5, avg_10 = avg_10)
avg_ratios
names(mkt_cap_gdp)
#Form a new data frame
avg_ratios = data.frame(country = mkt_cap_gdp$country, avg = avg, avg_5 = avg_5, avg_10 = avg_10)
#See if undervalued or overvalued
mkt_cap_gdp$more_avg = ifelse(mkt_cap_gdp$`2018` < avg_ratios$avg,1,0)
#See if undervalued or overvalued
mkt_cap_gdp$more_avg = ifelse(mkt_cap_gdp$`2018` < avg_ratios$avg,1,0)
mkt_cap_gdp$more_avg_5 = ifelse(mkt_cap_gdp$`2018` < avg_ratios$avg_5,1,0)
mkt_cap_gdp$more_avg_10 = ifelse(mkt_cap_gdp$`2018` < avg_ratios$avg_10,1,0)
mkt_cap_gdp$less_avg = ifelse(mkt_cap_gdp$`2018` < avg_ratios$avg,1,0)
mkt_cap_gdp$less_avg_5 = ifelse(mkt_cap_gdp$`2018` < avg_ratios$avg_5,1,0)
mkt_cap_gdp$less_avg_10 = ifelse(mkt_cap_gdp$`2018` < avg_ratios$avg_10,1,0)
mkt_cap_gdp_long = melt(mkt_cap_gdp, id = c("country",
"more_avg",
"more_avg_5",
"more_avg_10",
"less_avg",
"less_avg_5",
"less_avg_10"))
View(mkt_cap_gdp_long)
mkt_cap_gdp_long$variable = as.numeric(as.vector(mkt_cap_gdp_long$variable))
ggplot(data = subset(mkt_cap_gdp_long,
more_avg == 1 &
more_avg_5== 1 &
more_avg_10 == 1),
aes(x = variable, y = value, colour = country)) +
geom_line()
#Find max
max_ratio = apply(mkt_cap_gdp[,-1],1,max,na.rm = T)
#Find min
min_ratio = apply(mkt_cap_gdp[,-1],1,min,na.rm = T)
max_ratio
min_ratio
#Find max
max_ratio = apply(mkt_cap_gdp[,c(-1,-which(names(mkt_cap_gdp) == "2018"))],1,max,na.rm = T)
max_ratio
#Find min
min_ratio = apply(mkt_cap_gdp[,c(-1,-which(names(mkt_cap_gdp) == "2018"))],1,min,na.rm = T)
min_ratio
#Macro analysis on Mkt cap to GDP
#Do trailing 5 year averages
#Maybe better t
#Rebase to 2016 using GFP growth figures for key countries
library("WDI")
library("reshape2")
library("rvest")
library("ggplot2")
rm(list = ls())
# hk_ind = (3193235.54 * 1000000)/(320.9 * 1000000000)
setwd("/home/jirong/Dropbox/macro analysis")
##################################Trying out world bank API########################
#Market cap data
mkt_cap = WDI(country = "all", indicator = "CM.MKT.LCAP.CD",
start = 1900, end = 2018, extra = FALSE, cache = NULL)
names(mkt_cap)[which(names(mkt_cap) == "CM.MKT.LCAP.CD")] = "value"
#Cast the dataframes
mkt_cap_wide = dcast(mkt_cap,country ~ year,na.rm = T)
#GDP data-->NY.GDP.MKTP.CD
gdp = WDI(country = "all", indicator = "NY.GDP.MKTP.CD",
start = 1900, end = 2018, extra = FALSE, cache = NULL)
names(gdp)[which(names(gdp) == "NY.GDP.MKTP.CD")] = "value"
#Cast the dataframes
gdp_wide = dcast(gdp,country ~ year,na.rm = T)
#For a start-->Scrape the data from wikipedia-->Port it to a google sheet-->To 'project' the 2017 GDP growth rates
#https://en.wikipedia.org/wiki/List_of_countries_by_real_GDP_growth_rate
url <- "https://en.wikipedia.org/wiki/List_of_countries_by_real_GDP_growth_rate#cite_note-1"
webpage = read_html(url)
tbls <- html_nodes(webpage, "table")
tbls_ls <- webpage %>%
html_nodes("table") %>%
.[1:4] %>%
html_table(fill = TRUE)
gdp_growth = tbls_ls[[1]]  #GDP real growth rates
names(gdp_growth) = c("rank","country","gdp_rate")
#Remove all []
for(i in 2:ncol(gdp_growth)){
gdp_growth[,i] = gsub("\\[.*\\]","",gdp_growth[,i])
}
gdp_growth$gdp_rate = as.numeric(gdp_growth$gdp_rate)
#Merge in to the data frame
gdp_wide = merge(gdp_wide,gdp_growth, by = "country", all.x = T)
gdp_wide = gdp_wide[!duplicated(gdp_wide$country),]
gdp_wide$`2017` = gdp_wide$`2016` * (1+ gdp_wide$gdp_rate/100)
#removing unnecssary names
gdp_wide = gdp_wide[,-which(names(gdp_wide) == "rank")]
gdp_wide = gdp_wide[,-which(names(gdp_wide) == "gdp_rate")]
#Assume 2018 GDP to be same as 2017
gdp_wide$`2018` = gdp_wide$`2017`
#Selecting the countries
#European countries
#BRIC
#Prominent Asia Countries
#Middle East
#For each country, assign a ticker symbol from NYSE
#Store the end 2016 price and the most updated price now. Then pluck the growth rate on the market cap
source("match_WB_US_ticker.R")
mkt_cap_wide = merge(mkt_cap_wide,wb_ticker, by = "country", all.x = T)
mkt_cap_wide$`2017` = mkt_cap_wide$`2016` * (1+mkt_cap_wide$returns_17)
mkt_cap_wide$`2018` = mkt_cap_wide$`2016` * (1+mkt_cap_wide$returns)
mkt_cap_wide = mkt_cap_wide[,-which(names(mkt_cap_wide) == "returns")]
mkt_cap_wide = mkt_cap_wide[,-which(names(mkt_cap_wide) == "returns_17")]
#remove irrelevant terms
#Plot the market cap to growth rates
#Check if names are the same
nrow(gdp_wide) == sum(mkt_cap_wide$country == gdp_wide$country)
mkt_cap_gdp = mkt_cap_wide
mkt_cap_gdp[,2:ncol(mkt_cap_gdp)] = mkt_cap_wide[,2:ncol(mkt_cap_wide)] / gdp_wide[,2:ncol(gdp_wide)]
mkt_cap_gdp = subset(mkt_cap_gdp,!is.na(mkt_cap_gdp$`2018`))
# write.csv(mkt_cap_gdp,"mkt_cap_gdp.csv",row.names = F)
#Use apply function to find the average, 5 year average, 10 year average, 20 year average
#Find historical average
avg = apply(mkt_cap_gdp[,-1],1,mean,na.rm = T)
#Find 5-year average
avg_5 = apply(mkt_cap_gdp[,-c(1,which(names(mkt_cap_gdp) == "1960"):
which(names(mkt_cap_gdp) == "2012"))],1,mean,na.rm = T)
#Find 10-year average
avg_10 = apply(mkt_cap_gdp[,-c(1,which(names(mkt_cap_gdp) == "1960"):
which(names(mkt_cap_gdp) == "2007"))],1,mean,na.rm = T)
#Find max
max_ratio = apply(mkt_cap_gdp[,c(-1,-which(names(mkt_cap_gdp) == "2018"))],1,max,na.rm = T)
#Find min
min_ratio = apply(mkt_cap_gdp[,c(-1,-which(names(mkt_cap_gdp) == "2018"))],1,min,na.rm = T)
#Form a new data frame
avg_ratios = data.frame(country = mkt_cap_gdp$country, avg = avg, avg_5 = avg_5, avg_10 = avg_10)
#See if it's at all time high
mkt_cap_gdp$all_time_high = ifelse(mkt_cap_gdp$`2018` > max_ratio,1,0)
mkt_cap_gdp$all_time_high
#See if it's at all time low
mkt_cap_gdp$all_time_low = ifelse(mkt_cap_gdp$`2018` < min_ratio,1,0)
mkt_cap_gdp$all_time_low
#look at overvalued country
mkt_cap_gdp_max_long = melt(subset(mkt_cap_gdp,all_time_high == 1), id = c("country"))
mkt_cap_gdp_max_long$variable = as.numeric(as.vector(mkt_cap_gdp_max_long$variable))
mkt_cap_gdp_max_long
ggplot(data = mkt_cap_gdp_max_long,
aes(x = variable, y = value, colour = country)) +
geom_line()
#Find historical average
avg = apply(mkt_cap_gdp[,c(-1,-which(names(mkt_cap_gdp) == "2018"))],1,mean,na.rm = T)
#Find 5-year average
avg_5 = apply(mkt_cap_gdp[,-c(1,which(names(mkt_cap_gdp) == "2018"),
which(names(mkt_cap_gdp) == "1960"):
which(names(mkt_cap_gdp) == "2012"))],
1,mean,na.rm = T)
#Find 10-year average
avg_10 = apply(mkt_cap_gdp[,-c(1,which(names(mkt_cap_gdp) == "2018"),
which(names(mkt_cap_gdp) == "1960"):
which(names(mkt_cap_gdp) == "2007"))],1,mean,na.rm = T)
mkt_cap_gdp$more_avg = ifelse(mkt_cap_gdp$`2018` > avg_ratios$avg,1,0)
mkt_cap_gdp$more_avg_5 = ifelse(mkt_cap_gdp$`2018` > avg_ratios$avg_5,1,0)
mkt_cap_gdp$more_avg_10 = ifelse(mkt_cap_gdp$`2018` > avg_ratios$avg_10,1,0)
mkt_cap_gdp$less_avg = ifelse(mkt_cap_gdp$`2018` < avg_ratios$avg,1,0)
mkt_cap_gdp$less_avg_5 = ifelse(mkt_cap_gdp$`2018` < avg_ratios$avg_5,1,0)
mkt_cap_gdp$less_avg_10 = ifelse(mkt_cap_gdp$`2018` < avg_ratios$avg_10,1,0)
names(mkt_cap_gdp)
dat = subset(mkt_cap_gdp,select = c("country","2018","all_time_high","all_time_low" ,"more_avg",
"more_avg_5","more_avg_10","less_avg","less_avg_5","less_avg_10"))
dat
dat$avg = avg
dat$avg_5 = avg_5
dat$avg_10 = avg_10
dat$max_ratio = max_ratio
dat$min_ratio = min_ratio
dat
dat = subset(dat,select = c("country","2018","avg","avg_5","avg_10","max_ratio","min_rato","all_time_high","all_time_low" ,"more_avg",
"more_avg_5","more_avg_10","less_avg","less_avg_5","less_avg_10"))
dat = subset(mkt_cap_gdp,select = c("country","2018","all_time_high","all_time_low" ,"more_avg",
"more_avg_5","more_avg_10","less_avg","less_avg_5","less_avg_10"))
dat$avg = avg
dat$avg_5 = avg_5
dat$avg_10 = avg_10
dat$max_ratio = max_ratio
dat$min_ratio = min_ratio
names(dat)
dat = subset(dat,select = c( "country","2018","avg","avg_5", "avg_10", "max_ratio", "min_ratio",
"all_time_high", "all_time_low", "more_avg","more_avg_5","more_avg_10","less_avg","less_avg_5",
"less_avg_10"   ))
dat
knitr::opts_chunk$set(echo = TRUE)
#Macro analysis on Mkt cap to GDP
#Do trailing 5 year averages
#Maybe better t
#Rebase to 2016 using GFP growth figures for key countries
library("WDI")
library("reshape2")
library("rvest")
library("ggplot2")
rm(list = ls())
# hk_ind = (3193235.54 * 1000000)/(320.9 * 1000000000)
setwd("/home/jirong/Dropbox/macro analysis")
##################################Trying out world bank API########################
#Market cap data
mkt_cap = WDI(country = "all", indicator = "CM.MKT.LCAP.CD",
start = 1900, end = 2018, extra = FALSE, cache = NULL)
library("WDI")
library("reshape2")
library("rvest")
library("ggplot2")
rm(list = ls())
# hk_ind = (3193235.54 * 1000000)/(320.9 * 1000000000)
setwd("/home/jirong/Dropbox/macro analysis")
mkt_cap = WDI(country = "all", indicator = "CM.MKT.LCAP.CD",
start = 1900, end = 2018, extra = FALSE, cache = NULL)
mkt_cap = WDI(country = "all", indicator = "CM.MKT.LCAP.CD",
start = 1900, end = 2018, extra = FALSE, cache = NULL)
library(blogdown)
setwd("/home/jirong/Desktop/github/jirong-blog")
blogdown::serve_site()
library(blogdown)
setwd("/home/jirong/Desktop/github/jirong-blog")
blogdown::serve_site()
