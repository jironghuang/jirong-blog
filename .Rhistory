plot(equity,main="Faber Strategy Equity Curve")
## ------------------------------------------------------------------------
ret <- Return.calculate(equity,method="log")
## ----PERFSUM,cache=FALSE-------------------------------------------------
charts.PerformanceSummary(ret, colorset = bluefocus,
main="Faber Strategy Performance")
#https://4310b1a9-a-a8fb2076-s-sites.googlegroups.com/a/r-programming.org/home/files/quantstrat.pdf?attachauth=ANoY7cqr8ySjFjp8x_enrZgq50sFHc2aGP4WJHxAPb6-yDx9y8vtS-Rk5ARiXEAyihM6bdZUcyj7htIO50t0PuS2cDVIRlpnVy9Hj7uBHiIHXyVeJiOR5haAp8GienVw_VmUfCMQgVXf7LeL9VFRAEkncsCwK6Di3WhuFr4DNnWjshz8qlr_nP3IXZ5OimR5SYF-XM1vUIST9pzW1gtniTAfyLldUKxcMQ%3D%3D&attredirects=0
## ----echo=FALSE----------------------------------------------------------
#########################################################################
# Copyright (C) 2011-2014 Guy Yollin                                    #
# License: http://www.gnu.org/licenses/gpl.html GPL version 2 or higher #
#########################################################################
rm(list = ls())
if(Sys.info()[1] == "Linux"){
setwd("/home/jirong/Dropbox/mastering_r_for_quant_finance/Trading scripts")
}else{
setwd("C:/Users/huangj/Dropbox/Trading scripts")
}
## ----include=FALSE-------------------------------------------------------
library(knitr)
opts_chunk$set(tidy=FALSE,cache=FALSE,size='scriptsize',
fig.path='figures/',fig.show='hide',fig.keep='last',
fig.align='center',	fig.width=7,	fig.height=5,
message=FALSE,warning=FALSE)
## ----echo=FALSE,cache=FALSE----------------------------------------------
options(width=81,continue=" ",digits=8)
## ------------------------------------------------------------------------
library(quantstrat)
search()
## ----echo=F,results='hide'-----------------------------------------------
suppressWarnings(try(rm(list=ls(FinancialInstrument:::.instrument),pos=FinancialInstrument:::.instrument),silent=TRUE))
## ------------------------------------------------------------------------
currency("USD")
stock("SPY",currency="USD",multiplier=1)
ls(envir=FinancialInstrument:::.instrument)
ls(all=T)
## ------------------------------------------------------------------------
# system settings
initDate <- '1997-12-31'
startDate <- '1998-01-01'
endDate <-  '2018-03-15'
initEq <- 1e6
## ------------------------------------------------------------------------
Sys.setenv(TZ="UTC")
## ----echo=FALSE,results='hide'-------------------------------------------
if(file.exists("SPY.RData"))
{
load("SPY.RData")
} else {
getSymbols('SPY', from=startDate, to=endDate, index.class="POSIXct", adjust=T)
save(list="SPY",file="SPY.RData")
}
## ----eval=FALSE----------------------------------------------------------
## getSymbols('SPY', from=startDate, to=endDate, index.class="POSIXct", adjust=T)
## ------------------------------------------------------------------------
#Change the daily data to month
SPY=to.monthly(SPY, indexAt='endof', drop.time=FALSE)
SPY$SMA10m <- SMA(Cl(SPY), 10)
## ------------------------------------------------------------------------
# inz portfolio, account
qs.strategy <- "qsFaber"
## ------------------------------------------------------------------------
rm.strat(qs.strategy) # remove strategy etc. if this is a re-run
## ----results='hide'------------------------------------------------------
initPortf(qs.strategy,'SPY', initDate=initDate)
## ----results='hide'------------------------------------------------------
initAcct(qs.strategy,portfolios=qs.strategy, initDate=initDate, initEq=initEq)
## ------------------------------------------------------------------------
# initialize orders container
args(initOrders)
initOrders(portfolio=qs.strategy,initDate=initDate)
# instantiate a new strategy object
args(strategy)
strategy(qs.strategy,store=TRUE)
## ------------------------------------------------------------------------
ls(all=T)
ls(.blotter)
ls(.strategy)
## ------------------------------------------------------------------------
args(getStrategy)
strat <-getStrategy(qs.strategy)
class(strat)
summary(strat)
## ------------------------------------------------------------------------
args(add.indicator)
## ----results='hide'------------------------------------------------------
add.indicator(strategy = qs.strategy, name = "SMA",
arguments = list(x = quote(Cl(mktdata)), n=10), label="SMA10")
## ------------------------------------------------------------------------
summary(getStrategy(qs.strategy))
## ------------------------------------------------------------------------
args(add.signal)
## ----results='hide'------------------------------------------------------
add.signal(qs.strategy,name="sigCrossover",
arguments = list(columns=c("Close","SMA10"),relationship="gt"),
label="Cl.gt.SMA")
## ----results='hide'------------------------------------------------------
add.signal(qs.strategy,name="sigCrossover",
arguments = list(columns=c("Close","SMA10"),relationship="lt"),
label="Cl.lt.SMA")
## ------------------------------------------------------------------------
summary(getStrategy(qs.strategy))
## ------------------------------------------------------------------------
args(add.rule)
## ------------------------------------------------------------------------
args(ruleSignal)
## ----results='hide'------------------------------------------------------
#   go long when close > MA
add.rule(qs.strategy, name='ruleSignal',
arguments = list(sigcol="Cl.gt.SMA", sigval=TRUE, orderqty=3000,
ordertype='market', orderside='long'),
type='enter')
## ----results='hide'------------------------------------------------------
#   exit when close < MA
add.rule(qs.strategy, name='ruleSignal',
arguments = list(sigcol="Cl.lt.SMA", sigval=TRUE, orderqty='all',
ordertype='market', orderside='long'),
type='exit') #Exit the long strategy here
#Short when below MA
add.rule(qs.strategy, name='ruleSignal',
arguments = list(sigcol="Cl.lt.SMA", sigval=TRUE, orderqty=-3000,
ordertype='market', orderside='short'),
type='enter')
add.rule(qs.strategy, name='ruleSignal',
arguments = list(sigcol="Cl.gt.SMA", sigval=TRUE, orderqty='all',
ordertype='market', orderside='short'),
type='exit') #Exit the long strategy here
## ------------------------------------------------------------------------
summary(getStrategy(qs.strategy))
## ------------------------------------------------------------------------
args(applyStrategy)
## ----results='hide'------------------------------------------------------
applyStrategy(strategy=qs.strategy , portfolios=qs.strategy)
## ----echo=F--------------------------------------------------------------
options(width=120)
## ----size='tiny'---------------------------------------------------------
getTxns(Portfolio=qs.strategy, Symbol="SPY")
## ----echo=F--------------------------------------------------------------
options(width=81)
## ----echo=FALSE----------------------------------------------------------
options(width=120,digits=6)
## ----size='Tiny'---------------------------------------------------------
mktdata["2002"]
## ----echo=FALSE----------------------------------------------------------
options(width=81,digits=8)
## ----results='hide'------------------------------------------------------
updatePortf(qs.strategy)
## ----results='hide'------------------------------------------------------
updateAcct(qs.strategy)
## ----results='hide'------------------------------------------------------
updateEndEq(qs.strategy)
## ----size='Tiny'---------------------------------------------------------
checkBlotterUpdate <- function(port.st,account.st,verbose=TRUE)
{
ok <- TRUE
p <- getPortfolio(port.st)
a <- getAccount(account.st)
syms <- names(p$symbols)
port.tot <- sum(sapply(syms,FUN = function(x) eval(parse(
text=paste("sum(p$symbols",x,"posPL.USD$Net.Trading.PL)",sep="$")))))
port.sum.tot <- sum(p$summary$Net.Trading.PL)
if( !isTRUE(all.equal(port.tot,port.sum.tot)) ) {
ok <- FALSE
if( verbose )
print("portfolio P&L doesn't match sum of symbols P&L")
}
initEq <- as.numeric(first(a$summary$End.Eq))
endEq <- as.numeric(last(a$summary$End.Eq))
if( !isTRUE(all.equal(port.tot,endEq-initEq)) ) {
ok <- FALSE
if( verbose )
print("portfolio P&L doesn't match account P&L")
}
if( sum(duplicated(index(p$summary))) ) {
ok <- FALSE
if( verbose )
print("duplicate timestamps in portfolio summary")
}
if( sum(duplicated(index(a$summary))) ) {
ok <- FALSE
if( verbose )
print("duplicate timestamps in account summary")
}
return(ok)
}
checkBlotterUpdate(qs.strategy,qs.strategy)
## ------------------------------------------------------------------------
# create custom theme
myTheme<-chart_theme()
myTheme$col$dn.col<-'lightblue'
myTheme$col$dn.border <- 'lightgray'
myTheme$col$up.border <- 'lightgray'
## ----PERFQS,cache=FALSE--------------------------------------------------
# plot performance
chart.Posn(qs.strategy, Symbol = 'SPY', Dates = '1998::',theme=myTheme,
TA='add_SMA(n=10,col=4, on=1, lwd=2)')
## ------------------------------------------------------------------------
tstats <- t(tradeStats(qs.strategy))
## ----TSTATS1,echo=FALSE,cache=FALSE--------------------------------------
textplot(tstats[1:15,,drop=FALSE],show.colnames=FALSE,halign='left')
## ----TSTATS2,echo=FALSE,cache=FALSE--------------------------------------
textplot(tstats[16:30,,drop=FALSE],show.colnames=FALSE,halign='left')
## ------------------------------------------------------------------------
ob <- getOrderBook(qs.strategy)
class(ob)
names(ob)
names(ob$qsFaber)
names(ob$qsFaber$SPY)
## ----echo=FALSE----------------------------------------------------------
options(width=110)
## ----size='tiny'---------------------------------------------------------
ob$qsFaber$SPY[,1:5]
## ----echo=FALSE----------------------------------------------------------
options(width=81)
## ----echo=FALSE----------------------------------------------------------
options(width=110)
## ----size='tiny'---------------------------------------------------------
ob$qsFaber$SPY[,6:11]
## ----echo=FALSE----------------------------------------------------------
options(width=81)
## ----echo=FALSE----------------------------------------------------------
options(width=100)
## ----size='tiny'---------------------------------------------------------
perTradeStats(qs.strategy)
## ----echo=FALSE----------------------------------------------------------
options(width=81)
## ----FABERMAE,cache=FALSE------------------------------------------------
chart.ME(Portfolio=qs.strategy, Symbol='SPY', type='MAE', scale='percent')
## ----FABERMFE,cache=FALSE------------------------------------------------
chart.ME(Portfolio=qs.strategy, Symbol='SPY', type='MFE', scale='percent')
## ----echo=FALSE----------------------------------------------------------
options(width=105)
## ----ACCTSUM,cache=FALSE,size='tiny'-------------------------------------
a <- getAccount(qs.strategy)
last(a$summary,5)
library(lattice)
xyplot(a$summary,type="h",col=4)
## ----echo=FALSE----------------------------------------------------------
options(width=81)
## ------------------------------------------------------------------------
equity <- a$summary$End.Eq
## ----EQCURVE,cache=FALSE-------------------------------------------------
plot(equity,main="Faber Strategy Equity Curve")
## ------------------------------------------------------------------------
ret <- Return.calculate(equity,method="log")
## ----PERFSUM,cache=FALSE-------------------------------------------------
charts.PerformanceSummary(ret, colorset = bluefocus,
main="Faber Strategy Performance")
#Create an arima garch function
#Create another data-frame starting from windowlength + 1 onwards
#Then use apply function to return the information
#Parallelize this-->http://dept.stat.lsa.umich.edu/~jerrick/courses/stat701/notes/parallel.html
#Input
# rolling window
# d,start_index - 1
# Import the necessary libraries
# Parallelize this if got time
library(quantmod)
library(lattice)
library(timeSeries)
library(rugarch)
library(parallel)
ticker = "GLD"   #this could be changed to a command line argument
stock = get(getSymbols(ticker, from="1950-01-01"))
spReturns = diff(log(Cl(stock)))
spReturns[as.character(head(index(Cl(stock)),1))] = 0   #Change the first returns to NA
arima_garch = function(d,windowLength){
#to see the freaking progress
print(d)
# Obtain the S&P500 rolling window for this day
#Using 500 as data points as inputs-->May not make sense to use 1st data point as input
spReturnsOffset = spReturns[(1+d):(windowLength+d)]
# Fit the ARIMA model
final.aic <- Inf
final.order <- c(0,0,0)
for (p in 0:5) for (q in 0:5) {
if ( p == 0 && q == 0) {
next
}
arimaFit = tryCatch( arima(spReturnsOffset, order=c(p, 0, q)),
error=function( err ) FALSE,
warning=function( err ) FALSE )
if( !is.logical( arimaFit ) ) {
current.aic <- AIC(arimaFit)
if (current.aic < final.aic) {
final.aic <- current.aic
final.order <- c(p, 0, q)
final.arima <- arima(spReturnsOffset, order=final.order)
}
} else {
next
}
}
# Specify and fit the GARCH model
spec = ugarchspec(
variance.model=list(garchOrder=c(1,1)),
mean.model=list(armaOrder=c(final.order[1], final.order[3]), include.mean=T),
distribution.model="sged"
)
fit = tryCatch(
ugarchfit(
spec, spReturnsOffset, solver = 'hybrid'
), error=function(e) e, warning=function(w) w
)
# If the GARCH model does not converge, set the direction to "long" else
# choose the correct forecast direction based on the returns prediction
# Output the results to the screen and the forecasts vector
if(is(fit, "warning")) {
#This is the non-converged option. Probably follow the
# forecasts[d+1] = paste(index(spReturnsOffset[windowLength]), 1, sep=",")   #edit this part to remain with previous forecast
# print(paste(index(spReturnsOffset[windowLength]), 1, sep=","))
return("warning")
} else {
fore = ugarchforecast(fit, n.ahead=1)     #1 step look ahead forecast
ind = fore@forecast$seriesFor
# forecasts[d+1] = paste(colnames(ind), ifelse(ind[1] < 0, -1, 1), sep=",")  #at d=0, 500th point. d = 1 is 501st pt
# print(paste(colnames(ind), ifelse(ind[1] < 0, -1, 1), sep=","))
return(ind[1])
}
}
#example of function returning forecasts value
# windowLength = 500
# foreLength = length(spReturns) - windowLength
# forecasts <- vector(mode="character", length=foreLength)
# for (d in 0:foreLength) {
#forecasts for x+1th row to last_row-500 to last row-1
#uses 1st row to 400th row for 401th row
# arima_garch(0,400)
wl = 400
#wl+1th row onwards
# a = mapply(arima_garch,d = 0:nrow(GLD)-wl,windowLength = wl)   #to return the whole series. from wl+1 to nrow(stock)-wl
# a = mapply(arima_garch,d = 0:100,windowLength = wl)
a = mcmapply(arima_garch,d = 0:10,windowLength = wl)
a
##http://www.quintuitive.com/2015/06/21/trading-moving-averages-with-less-whipsaws/
#sectors
# http://www.sectorspdr.com/sectorspdr/
#http://www.sectorspdr.com/sectorspdr/tools/sector-tracker
#think of how to build an annualized returns backtest
#After lag the signal by 1 day, the strategy crumbles
# S&P 500 Index		+2.72%
# Consumer Discretionary (XLY)		+2.95%
# Consumer Staples (XLP)		+1.44%
# Energy (XLE)		+1.78%
# Financials (XLF)		+3.28%
# Health Care (XLV)		+2.07%
# Industrials (XLI)		+2.42%
# Materials (XLB)		+2.11%
# Real Estate (XLRE)		+1.36%
# Technology (XLK)		+3.80%
# Utilities (XLU)		+1.04%
library(quantmod)
library(ggplot2)
library(PerformanceAnalytics)
library(tidyr)
library(dplyr)
library(tibble)
# Download data
# ticker = "^STI"
ticker = "XLK"
stock = getSymbols(ticker,from="1900-01-01",auto.assign=F)
names(stock) = c("open","high","low","close","volume","adj_close")
#Subset stock
stock = subset(stock,!is.na(stock$adj_close))
# Compute the returns
stock$rets = ROC(Cl(stock),type="discrete")
stock$index = 1:nrow(stock)
# Compute the adjusted returns-->Need to lag if not useful
stock$adj.rets_current = stock$rets/sqrt(runSum(stock$rets * stock$rets,10)/9)
# stock$adj.rets = lag(stock$adj.rets_current)
stock$adj.rets = stock$adj.rets_current
# The moving average
stock$sma = runMean(stock$adj.rets,n=200)
# The standard deviation
stock$stddev = sqrt(runSum(stock$adj.rets * stock$adj.rets,200)/199)
# Long trades are entered when the average turns positive
stock$upper.band = 0.0
# Long trades are closed when the average return goes below -0.05 standard deviations
stock$lower.band = -0.05*stock$stddev
#subset data with MA
stock = subset(stock,!is.na(stock$sma))
##################################Executing the trade#############################
stock$signal = ifelse(stock$sma > stock$upper.band,1,0)
stock$signal = ifelse(stock$sma < stock$lower.band,-1,stock$signal)
#Test sensitivity
stock$signal = lag(stock$signal);stock$signal[1] = 0
# table(stock$signal)
#Backtest
stock$strat_returns = stock$rets * stock$signal
stock$portfolio = NA
stock$portfolio[1] = 100 * (1+stock$strat_returns[1])
stock$portfolio = exp(cumsum(stock$strat_returns))
# for(i in 2:nrow(stock)){
#   stock$portfolio[i] = as.numeric(stock$portfolio[i-1]) * as.numeric((1+stock$strat_returns[i]))
# }
#counterfactual portfolio
stock$benchmark = exp(cumsum(stock$rets))
# stock$benchmark = NA
# stock$benchmark[1] = 100
#
# for(i in 2:nrow(stock)){
#   stock$benchmark[i] = as.numeric(stock$benchmark[i-1]) * as.numeric((1+stock$ret[i]))
# }
#Strategy performance-->Create an excel workbook?
plot(stock$portfolio)
table.Drawdowns(stock$strat_returns, top=10)
table.DownsideRisk(stock$strat_returns)
table.AnnualizedReturns(stock$strat_returns)
charts.PerformanceSummary(stock$strat_returns)
#Fixed bet strategy
stock$fix_ret = 100*stock$strat_returns
stock$cum_sum = cumsum(stock$fix_ret)
plot(stock$cum_sum)
#Benchmark cumulative perf
plot(stock$benchmark)
table.Drawdowns(stock$rets, top=10)
table.DownsideRisk(stock$rets)
table.AnnualizedReturns(stock$rets)
charts.PerformanceSummary(stock$rets)
#Fixed bet strategy
stock$fix_ret_benchmark = 100*stock$rets
stock$cum_sum_benchmark = cumsum(stock$fix_ret_benchmark)
plot(stock$cum_sum_benchmark)
#Calculate the turnover
stock$churn = 0
for(i in 2:nrow(stock)){
if((as.numeric(stock$signal[i]) == 1) & (as.numeric(stock$signal[i-1]) == 0)){
stock$churn[i] = 1
}else if ((as.numeric(stock$signal[i]) == 0) & (as.numeric(stock$signal[i-1]) == 1)){
stock$churn[i] = 1
}else if((as.numeric(stock$signal[i]) == -1) & (as.numeric(stock$signal[i-1]) == 0)){
stock$churn[i] = 1
}else if((as.numeric(stock$signal[i]) == 0) & (as.numeric(stock$signal[i-1]) == -1)){
stock$churn[i] = 1
}else if((as.numeric(stock$signal[i]) == -1) & (as.numeric(stock$signal[i-1]) == 1)){
stock$churn[i] = 1
}else if((as.numeric(stock$signal[i]) == 1) & (as.numeric(stock$signal[i-1]) == -1)){
stock$churn[i] = 1
}
}
sum(stock$churn)
#Average loss in dollars per signal: Long and short strategy
#Stake is 100 dollars per trade
as.tibble(stock) %>%
group_by(signal) %>%
summarize(mean = mean(fix_ret))
charts.PerformanceSummary(cbind(stock$strat_returns,stock$rets))
rm(list = ls())
library(quantmod)
library(ggplot2)
library(PerformanceAnalytics)
library(tidyr)
library(dplyr)
library(tibble)
# Download data
ticker1 = "GLD"
stock1 = getSymbols(ticker1,from="1900-01-01",auto.assign=F)
names(stock1) = c("open","high","low","close","volume","adj_close")
ticker2 = "SPY"
stock1 = getSymbols(ticker1,from="1900-01-01",auto.assign=F)
names(stock1) = c("open","high","low","close","volume","adj_close")
ticker2 = "AGG"
stock1 = getSymbols(ticker1,from="1900-01-01",auto.assign=F)
names(stock1) = c("open","high","low","close","volume","adj_close")
plot(SPY[,6])
library(quantmod)
library(ggplot2)
library(PerformanceAnalytics)
library(tidyr)
library(dplyr)
library(tibble)
# Download data
ticker1 = "GLD"
stock1 = getSymbols(ticker1,from="1900-01-01",auto.assign=F)
names(stock1) = c("open","high","low","close","volume","adj_close")
ticker2 = "SPY"
stock2 = getSymbols(ticker1,from="1900-01-01",auto.assign=F)
names(stock1) = c("open","high","low","close","volume","adj_close")
ticker3 = "AGG"
stock3 = getSymbols(ticker3,from="1900-01-01",auto.assign=F)
names(stock3) = c("open","high","low","close","volume","adj_close")
plot(stock3[,6])
plot(stock2[,6])
plot(stock1[,6])
library(quantmod)
library(ggplot2)
library(PerformanceAnalytics)
library(tidyr)
library(dplyr)
library(tibble)
# Download data
ticker1 = "GLD"
stock1 = getSymbols(ticker1,from="1900-01-01",auto.assign=F)
names(stock1) = c("open","high","low","close","volume","adj_close")
ticker2 = "SPY"
stock2 = getSymbols(ticker1,from="1900-01-01",auto.assign=F)
names(stock1) = c("open","high","low","close","volume","adj_close")
ticker3 = "AGG"
stock3 = getSymbols(ticker3,from="1900-01-01",auto.assign=F)
names(stock3) = c("open","high","low","close","volume","adj_close")
View(stock1)
last(stock1, 2)
library(blogdown)
setwd("/home/jirong/Desktop/github/jirong-blog")
# blogdown::new_site(theme = "gcushen/hugo-academic")
# blogdown::serve_site()
# blogdown::new_post("Test post")
hugo_server(host="192.168.1.238", port=3337)    #Need to hard code ip address for it work across computers
library(blogdown)
setwd("/home/jirong/Desktop/github/jirong-blog")
# blogdown::new_site(theme = "gcushen/hugo-academic")
blogdown::serve_site()
